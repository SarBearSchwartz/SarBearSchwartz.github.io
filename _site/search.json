[
  {
    "objectID": "youtube.html",
    "href": "youtube.html",
    "title": "YouTube Channel",
    "section": "",
    "text": "Link\nSarah Schwartz Stats\n\n\n\n Back to top",
    "crumbs": [
      "RESOURCES",
      "YouTube"
    ]
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/faq.html",
    "href": "themes/hugo-universal-theme/exampleSite/content/faq.html",
    "title": "Sarah Schwartz Stats",
    "section": "",
    "text": "+++ title = “FAQ” description = “Frequently asked questions” keywords = [“FAQ”,“How do I”,“questions”,“what if”] +++\nPellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/faq.html#what-to-do-if-i-have-still-not-received-the-order",
    "href": "themes/hugo-universal-theme/exampleSite/content/faq.html#what-to-do-if-i-have-still-not-received-the-order",
    "title": "Sarah Schwartz Stats",
    "section": "1. WHAT TO DO IF I HAVE STILL NOT RECEIVED THE ORDER?",
    "text": "1. WHAT TO DO IF I HAVE STILL NOT RECEIVED THE ORDER?\nPellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.\n\nLorem ipsum dolor sit amet, consectetuer adipiscing elit.\nAliquam tincidunt mauris eu risus.\nVestibulum auctor dapibus neque."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/faq.html#what-are-the-postal-rates",
    "href": "themes/hugo-universal-theme/exampleSite/content/faq.html#what-are-the-postal-rates",
    "title": "Sarah Schwartz Stats",
    "section": "2. WHAT ARE THE POSTAL RATES?",
    "text": "2. WHAT ARE THE POSTAL RATES?\nAnim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven’t heard of them accusamus labore sustainable VHS."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/faq.html#do-you-send-overseas",
    "href": "themes/hugo-universal-theme/exampleSite/content/faq.html#do-you-send-overseas",
    "title": "Sarah Schwartz Stats",
    "section": "3. DO YOU SEND OVERSEAS?",
    "text": "3. DO YOU SEND OVERSEAS?\nAnim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven’t heard of them accusamus labore sustainable VHS."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/faq.html#why-are-you-more-expensive-than-others",
    "href": "themes/hugo-universal-theme/exampleSite/content/faq.html#why-are-you-more-expensive-than-others",
    "title": "Sarah Schwartz Stats",
    "section": "4. WHY ARE YOU MORE EXPENSIVE THAN OTHERS?",
    "text": "4. WHY ARE YOU MORE EXPENSIVE THAN OTHERS?\nPellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.\n\nLorem ipsum dolor sit amet, consectetuer adipiscing elit.\nAliquam tincidunt mauris eu risus.\nVestibulum auctor dapibus neque."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/faq.html#another-important-question",
    "href": "themes/hugo-universal-theme/exampleSite/content/faq.html#another-important-question",
    "title": "Sarah Schwartz Stats",
    "section": "5. ANOTHER IMPORTANT QUESTION",
    "text": "5. ANOTHER IMPORTANT QUESTION\nPellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.\n\nLorem ipsum dolor sit amet, consectetuer adipiscing elit.\nAliquam tincidunt mauris eu risus.\nVestibulum auctor dapibus neque.\n\n\n\nIn case you haven’t found the answer for your question please feel free to contact us, our customer support will be happy to help you."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/migrate-from-jekyll.html",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/migrate-from-jekyll.html",
    "title": "Sarah Schwartz Stats",
    "section": "",
    "text": "+++ title = “Migrate from Jekyll” tags = [“ipsum”] categories = [“lorem”] banner = “img/banners/banner-5.jpg” twitter_author = “jekyllrb” +++"
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/migrate-from-jekyll.html#move-static-content-to-static",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/migrate-from-jekyll.html#move-static-content-to-static",
    "title": "Sarah Schwartz Stats",
    "section": "Move static content to static",
    "text": "Move static content to static\nJekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ &lt;root&gt;/\n    ▾ images/\n        logo.png\nshould become\n▾ &lt;root&gt;/\n    ▾ static/\n        ▾ images/\n            logo.png\nAdditionally, you’ll want any files that should reside at the root (such as CNAME) to be moved to static."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/migrate-from-jekyll.html#create-your-hugo-configuration-file",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/migrate-from-jekyll.html#create-your-hugo-configuration-file",
    "title": "Sarah Schwartz Stats",
    "section": "Create your Hugo configuration file",
    "text": "Create your Hugo configuration file\nHugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/migrate-from-jekyll.html#set-your-configuration-publish-folder-to-_site",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/migrate-from-jekyll.html#set-your-configuration-publish-folder-to-_site",
    "title": "Sarah Schwartz Stats",
    "section": "Set your configuration publish folder to _site",
    "text": "Set your configuration publish folder to _site\nThe default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you’ll want to do one of two alternatives:\n\nChange your submodule to point to map gh-pages to public instead of _site (recommended).\n git submodule deinit _site\n git rm _site\n git submodule add -b gh-pages git@github.com:your-username/your-repo.git public\nOr, change the Hugo configuration to use _site instead of public.\n {\n     ..\n     \"publishdir\": \"_site\",\n     ..\n }"
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/migrate-from-jekyll.html#convert-jekyll-templates-to-hugo-templates",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/migrate-from-jekyll.html#convert-jekyll-templates-to-hugo-templates",
    "title": "Sarah Schwartz Stats",
    "section": "Convert Jekyll templates to Hugo templates",
    "text": "Convert Jekyll templates to Hugo templates\nThat’s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll’s template documentation if you need to refresh your memory on how you built your blog and Hugo’s template to learn Hugo’s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/migrate-from-jekyll.html#convert-jekyll-plugins-to-hugo-shortcodes",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/migrate-from-jekyll.html#convert-jekyll-plugins-to-hugo-shortcodes",
    "title": "Sarah Schwartz Stats",
    "section": "Convert Jekyll plugins to Hugo shortcodes",
    "text": "Convert Jekyll plugins to Hugo shortcodes\nJekyll has plugins; Hugo has shortcodes. It’s fairly trivial to do a port.\n\nImplementation\nAs an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll’s plugin:\nmodule Jekyll\n  class ImageTag &lt; Liquid::Tag\n    @url = nil\n    @caption = nil\n    @class = nil\n    @link = nil\n    // Patterns\n    IMAGE_URL_WITH_CLASS_AND_CAPTION =\n    IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\"(.*?)\"(\\s+)-&gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i\n    IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\"(.*?)\"/i\n    IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i\n    IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i\n    def initialize(tag_name, markup, tokens)\n      super\n      if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK\n        @class   = $1\n        @url     = $3\n        @caption = $7\n        @link = $9\n      elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION\n        @class   = $1\n        @url     = $3\n        @caption = $7\n      elsif markup =~ IMAGE_URL_WITH_CAPTION\n        @url     = $1\n        @caption = $5\n      elsif markup =~ IMAGE_URL_WITH_CLASS\n        @class = $1\n        @url   = $3\n      elsif markup =~ IMAGE_URL\n        @url = $1\n      end\n    end\n    def render(context)\n      if @class\n        source = \"&lt;figure class='#{@class}'&gt;\"\n      else\n        source = \"&lt;figure&gt;\"\n      end\n      if @link\n        source += \"&lt;a href=\\\"#{@link}\\\"&gt;\"\n      end\n      source += \"&lt;img src=\\\"#{@url}\\\"&gt;\"\n      if @link\n        source += \"&lt;/a&gt;\"\n      end\n      source += \"&lt;figcaption&gt;#{@caption}&lt;/figcaption&gt;\" if @caption\n      source += \"&lt;/figure&gt;\"\n      source\n    end\n  end\nend\nLiquid::Template.register_tag('image', Jekyll::ImageTag)\nis written as this Hugo shortcode:\n&lt;!-- image --&gt;\n&lt;figure {{ with .Get \"class\" }}class=\"{{.}}\"{{ end }}&gt;\n    {{ with .Get \"link\"}}&lt;a href=\"{{.}}\"&gt;{{ end }}\n        &lt;img src=\"{{ .Get \"src\" }}\" {{ if or (.Get \"alt\") (.Get \"caption\") }}alt=\"{{ with .Get \"alt\"}}{{.}}{{else}}{{ .Get \"caption\" }}{{ end }}\"{{ end }} /&gt;\n    {{ if .Get \"link\"}}&lt;/a&gt;{{ end }}\n    {{ if or (or (.Get \"title\") (.Get \"caption\")) (.Get \"attr\")}}\n    &lt;figcaption&gt;{{ if isset .Params \"title\" }}\n        {{ .Get \"title\" }}{{ end }}\n        {{ if or (.Get \"caption\") (.Get \"attr\")}}&lt;p&gt;\n        {{ .Get \"caption\" }}\n        {{ with .Get \"attrlink\"}}&lt;a href=\"{{.}}\"&gt; {{ end }}\n            {{ .Get \"attr\" }}\n        {{ if .Get \"attrlink\"}}&lt;/a&gt; {{ end }}\n        &lt;/p&gt; {{ end }}\n    &lt;/figcaption&gt;\n    {{ end }}\n&lt;/figure&gt;\n&lt;!-- image --&gt;\n\n\nUsage\nI simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \"One of my favorite touristy-type photos. I secretly waited for the good light while we were \"having fun\" and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\" -&gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}\nto this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{%/* fig class=\"full\" src=\"http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\" title=\"One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\" link=\"http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\" */%}}\nAs a bonus, the shortcode named parameters are, arguably, more readable."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/migrate-from-jekyll.html#finishing-touches",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/migrate-from-jekyll.html#finishing-touches",
    "title": "Sarah Schwartz Stats",
    "section": "Finishing touches",
    "text": "Finishing touches\n\nFix content\nDepending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\n\n\nClean up\nYou’ll want to remove the Jekyll configuration at this point. If you have anything else that isn’t used, delete it."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/migrate-from-jekyll.html#a-practical-example-in-a-diff",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/migrate-from-jekyll.html#a-practical-example-in-a-diff",
    "title": "Sarah Schwartz Stats",
    "section": "A practical example in a diff",
    "text": "A practical example in a diff\nHey, it’s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/hugo-is-for-lovers.html",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/hugo-is-for-lovers.html",
    "title": "Sarah Schwartz Stats",
    "section": "",
    "text": "+++ title = “Hugo is for lovers” date = “2015-08-03T13:39:46+02:00” tags = [“hugo”] categories = [“pseudo”] banner = “img/banners/banner-3.jpg” summary=“This is the summary Goto hugo releases and download the appropriate version for your os and architecture. Save it somewhere specific as we will be using it in the next step. More complete instructions are available at installing hugo” +++"
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/hugo-is-for-lovers.html#step-1.-install-hugo",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/hugo-is-for-lovers.html#step-1.-install-hugo",
    "title": "Sarah Schwartz Stats",
    "section": "Step 1. Install Hugo",
    "text": "Step 1. Install Hugo\nGoto hugo releases and download the appropriate version for your os and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at installing hugo"
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/hugo-is-for-lovers.html#step-2.-build-the-docs",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/hugo-is-for-lovers.html#step-2.-build-the-docs",
    "title": "Sarah Schwartz Stats",
    "section": "Step 2. Build the Docs",
    "text": "Step 2. Build the Docs\nHugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\n\nClone the hugo repository\nGo into the repo\nRun hugo in server mode and build the docs\nOpen your browser to http://localhost:1313\n\nCorresponding pseudo commands:\ngit clone https://github.com/spf13/hugo\ncd hugo\n/path/to/where/you/installed/hugo server --source=./docs\n&gt; 29 pages created\n&gt; 0 tags index created\n&gt; in 27 ms\n&gt; Web Server is available at http://localhost:1313\n&gt; Press ctrl+c to stop\nOnce you’ve gotten here, follow along the rest of this page on your local build."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/hugo-is-for-lovers.html#step-3.-change-the-docs-site",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/hugo-is-for-lovers.html#step-3.-change-the-docs-site",
    "title": "Sarah Schwartz Stats",
    "section": "Step 3. Change the docs site",
    "text": "Step 3. Change the docs site\nStop the Hugo process by hitting ctrl+c.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch\n&gt; 29 pages created\n&gt; 0 tags index created\n&gt; in 27 ms\n&gt; Web Server is available at http://localhost:1313\n&gt; Watching for changes in /Users/spf13/Code/hugo/docs/content\n&gt; Press ctrl+c to stop\nOpen your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n&gt; Change detected, rebuilding site\n\n&gt; 29 pages created\n&gt; 0 tags index created\n&gt; in 26 ms\nRefresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it’s finished building.. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/hugo-is-for-lovers.html#step-4.-have-fun",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/hugo-is-for-lovers.html#step-4.-have-fun",
    "title": "Sarah Schwartz Stats",
    "section": "Step 4. Have fun",
    "text": "Step 4. Have fun\nThe best way to learn something is to play with it."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/creating-a-new-theme.html",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/creating-a-new-theme.html",
    "title": "Sarah Schwartz Stats",
    "section": "",
    "text": "+++ title = “Creating a new theme” date = “2015-06-24T13:50:46+02:00” tags = [“theme”] categories = [“starting”] description = “This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content.” banner = “img/banners/banner-1.jpg” authors = [“Jane Doe”] +++"
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/creating-a-new-theme.html#introduction",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/creating-a-new-theme.html#introduction",
    "title": "Sarah Schwartz Stats",
    "section": "Introduction",
    "text": "Introduction\nThis tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I’ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won’t cover using CSS to style your theme.\nWe’ll start with creating a new site with a very basic template. Then we’ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the “$” prompt. The output will follow. Lines that start with “#” are comments that I’ve added to explain a point. When I show updates to a file, the “:wq” on the last line means to save the file.\nHere’s an example:\n## this is a comment\n$ echo this is a command\nthis is a command\n\n## edit the file\n$vi foo.md\n+++\ndate = \"2014-09-28\"\ntitle = \"creating a new theme\"\n+++\n\nbah and humbug\n:wq\n\n## show it\n$ cat foo.md\n+++\ndate = \"2014-09-28\"\ntitle = \"creating a new theme\"\n+++\n\nbah and humbug\n$"
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/creating-a-new-theme.html#some-definitions",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/creating-a-new-theme.html#some-definitions",
    "title": "Sarah Schwartz Stats",
    "section": "Some Definitions",
    "text": "Some Definitions\nThere are a few concepts that you need to understand before creating a theme.\n\nSkins\nSkins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\n\n\nThe Home Page\nThe home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\n\n\nSite Configuration File\nWhen Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\n\n\nContent\nContent is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\n\nFront Matter\nThe front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\n\n\nMarkdown\nContent is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\n\n\n\nTemplate Files\nHugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it’s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\n\nSingle Template\nA single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\n\n\nList Template\nA list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\n\n\nPartial Template\nA partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/creating-a-new-theme.html#create-a-new-site",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/creating-a-new-theme.html#create-a-new-site",
    "title": "Sarah Schwartz Stats",
    "section": "Create a New Site",
    "text": "Create a New Site\nLet’s use Hugo to create a new web site. I’m a Mac user, so I’ll create mine in my home directory, in the Sites folder. If you’re using Linux, you might have to create the folder first.\nThe “new site” command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta\n$ cd ~/Sites/zafta\n$ ls -l\ntotal 8\ndrwxr-xr-x  7 quoha  staff  238 Sep 29 16:49 .\ndrwxr-xr-x  3 quoha  staff  102 Sep 29 16:49 ..\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes\n-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static\n$\nTake a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That’s a topic for a different tutorial, so please ignore them for now.\n\nGenerate the HTML For the New Site\nRunning the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that’s everything that’s not content). Since we have an empty site, it won’t do much, but it will do it very quickly.\n$ hugo --verbose\nINFO: 2014/09/29 Using config file: config.toml\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\nWARN: 2014/09/29 Unable to locate layout: [404.html]\n0 draft content\n0 future content\n0 pages created\n0 tags created\n0 categories created\nin 2 ms\n$\nThe “--verbose” flag gives extra information that will be helpful when we build the template. Every line of the output that starts with “INFO:” or “WARN:” is present because we used that flag. The lines that start with “WARN:” are warning messages. We’ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l\ntotal 8\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes\n-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts\ndrwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static\n$\nSee that new public/ directory? Hugo placed all generated content there. When you’re ready to publish your web site, that’s the place to start. For now, though, let’s just confirm that we have what we’d expect from a site with no content.\n$ ls -l public\ntotal 16\n-rw-r--r--  1 quoha  staff  416 Sep 29 17:02 index.xml\n-rw-r--r--  1 quoha  staff  262 Sep 29 17:02 sitemap.xml\n$\nHugo created two XML files, which is standard, but there are no HTML files.\n\n\nTest the New Site\nVerify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the “server” command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\nWARN: 2014/09/29 Unable to locate layout: [404.html]\n0 draft content\n0 future content\n0 pages created\n0 tags created\n0 categories created\nin 2 ms\nServing pages from /Users/quoha/Sites/zafta/public\nWeb Server is available at http://localhost:1313\nPress Ctrl+C to stop\nConnect to the listed URL (it’s on the line that starts with “Web Server”). If everything is working correctly, you should get a page that shows the following:\nindex.xml\nsitemap.xml\nThat’s a listing of your public/ directory. Hugo didn’t create a home page because our site has no content. When there’s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\nWARN: 2014/09/29 Unable to locate layout: [404.html]\nThat second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it’s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we’ll cover later that explain the names and paths. For now, just remember that Hugo couldn’t find a template for the home page and it told you so.\nAt this point, you’ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/creating-a-new-theme.html#create-a-new-theme",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/creating-a-new-theme.html#create-a-new-theme",
    "title": "Sarah Schwartz Stats",
    "section": "Create a New Theme",
    "text": "Create a New Theme\nHugo doesn’t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe’re going to create a new theme called “zafta.” Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses “post” over “blog”. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\n\nCreate a Skeleton\nUse the hugo “new” command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta\n\n$ ls -l\ntotal 8\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes\n-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts\ndrwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static\ndrwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes\n\n$ find themes -type f | xargs ls -l\n-rw-r--r--  1 quoha  staff  1081 Sep 29 17:31 themes/zafta/LICENSE.md\n-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/archetypes/default.md\n-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\n-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/single.html\n-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/index.html\n-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html\n-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/header.html\n-rw-r--r--  1 quoha  staff    93 Sep 29 17:31 themes/zafta/theme.toml\n$\nThe skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They’re optional, but if you’re going to be distributing your theme, it tells the world who to praise (or blame). It’s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml\nauthor = \"michael d henderson\"\ndescription = \"a minimal working template\"\nlicense = \"MIT\"\nname = \"zafta\"\nsource_repo = \"\"\ntags = [\"tags\", \"categories\"]\n:wq\n\n## also edit themes/zafta/LICENSE.md and change\n## the bit that says \"YOUR_NAME_HERE\"\nNote that the the skeleton’s template files are empty. Don’t worry, we’ll be changing that shortly.\n$ find themes/zafta -name '*.html' | xargs ls -l\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/single.html\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/index.html\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/header.html\n$\n\n\nUpdate the Configuration File to Use the Theme\nNow that we’ve got a theme to work with, it’s a good idea to add the theme name to the configuration file. This is optional, because you can always add “-t zafta” on all your commands. I like to put it the configuration file because I like shorter command lines. If you don’t put it in the configuration file or specify it on the command line, you won’t use the template that you’re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml\ntheme = \"zafta\"\nbaseurl = \"\"\nlanguageCode = \"en-us\"\ntitle = \"zafta - totally refreshing\"\nMetaDataFormat = \"toml\"\n:wq\n\n$\n\n\nGenerate the Site\nNow that we have an empty theme, let’s generate the site again.\n$ hugo --verbose\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\nWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\n0 draft content\n0 future content\n0 pages created\n0 tags created\n0 categories created\nin 2 ms\n$\nDid you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme’s directory.\nLet’s check the public/ directory to see what Hugo’s created.\n$ ls -l public\ntotal 16\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 css\n-rw-r--r--  1 quoha  staff    0 Sep 29 17:56 index.html\n-rw-r--r--  1 quoha  staff  407 Sep 29 17:56 index.xml\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 js\n-rw-r--r--  1 quoha  staff  243 Sep 29 17:56 sitemap.xml\n$\nNotice four things:\n\nHugo created a home page. This is the file public/index.html.\nHugo created a css/ directory.\nHugo created a js/ directory.\nHugo claimed that it created 0 pages. It created a file and copied over static files, but didn’t create any pages. That’s because it considers a “page” to be a file created directly from a content file. It doesn’t count things like the index.html files that it creates automatically.\n\n\nThe Home Page\nHugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo’s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\nIf it can’t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l\n-rw-r--r--  1 quoha  staff  0 Sep 29 20:21 ./public/index.html\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 ./themes/zafta/layouts/index.html\n$\n\n\nThe Magic of Static\nHugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo’s opinion is that you’ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don’t like that, you can change the directory names in your theme directory or even delete them completely. Hugo’s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld\ndrwxr-xr-x  7 quoha  staff  238 Sep 29 17:38 themes/zafta\ndrwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes/zafta/archetypes\ndrwxr-xr-x  5 quoha  staff  170 Sep 29 17:31 themes/zafta/layouts\ndrwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/_default\ndrwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/partials\ndrwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/static\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/css\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/js\n$"
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/creating-a-new-theme.html#the-theme-development-cycle",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/creating-a-new-theme.html#the-theme-development-cycle",
    "title": "Sarah Schwartz Stats",
    "section": "The Theme Development Cycle",
    "text": "The Theme Development Cycle\nWhen you’re working on a theme, you will make changes in the theme’s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n\nPurge the public/ directory.\nRun the built in web server in watch mode.\nOpen your site in a browser.\nUpdate the theme.\nGlance at your browser window to see changes.\nReturn to step 4.\n\nI’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\n\nPurge the public/ Directory\nWhen generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you’re building on an SSD, you should ignore this. Churning on a SSD can be costly.\n\n\nHugo’s Watch Option\nHugo’s “--watch” option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\n\n\nLive Reload\nHugo’s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, “Wow, that’s totally amazing.”\n\n\nDevelopment Commands\nUse the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory.\n##\n$ rm -rf public\n##\n## run hugo in watch mode\n##\n$ hugo server --watch --verbose\nHere’s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I’ve said this before, it’s amazing.\n$ rm -rf public\n$ hugo server --watch --verbose\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\nWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\n0 draft content\n0 future content\n0 pages created\n0 tags created\n0 categories created\nin 2 ms\nWatching for changes in /Users/quoha/Sites/zafta/content\nServing pages from /Users/quoha/Sites/zafta/public\nWeb Server is available at http://localhost:1313\nPress Ctrl+C to stop\nINFO: 2014/09/29 File System Event: [\"/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\": MODIFY|ATTRIB]\nChange detected, rebuilding site\n\nWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\n0 draft content\n0 future content\n0 pages created\n0 tags created\n0 categories created\nin 1 ms"
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/creating-a-new-theme.html#update-the-home-page-template",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/creating-a-new-theme.html#update-the-home-page-template",
    "title": "Sarah Schwartz Stats",
    "section": "Update the Home Page Template",
    "text": "Update the Home Page Template\nThe home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme’s layout/ directory:\n\nindex.html\n_default/list.html\n_default/single.html\n\nWe could update one of the default templates, but a good design decision is to update the most specific template available. That’s not a hard and fast rule (in fact, we’ll break it a few times in this tutorial), but it is a good generalization.\n\nMake a Static Home Page\nRight now, that page is empty because we don’t have any content and we don’t have any logic in the template. Let’s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n  &lt;p&gt;hugo says hello!&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n:wq\n\n$\nBuild the web site and then verify the results.\n$ hugo --verbose\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\nWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\n0 draft content\n0 future content\n0 pages created\n0 tags created\n0 categories created\nin 2 ms\n\n$ find public -type f -name '*.html' | xargs ls -l\n-rw-r--r--  1 quoha  staff  78 Sep 29 21:26 public/index.html\n\n$ cat public/index.html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n  &lt;p&gt;hugo says hello!&lt;/p&gt;\n&lt;/html&gt;\n\nLive Reload\nNote: If you’re running the server with the --watch option, you’ll see different content in the file:\n$ cat public/index.html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n  &lt;p&gt;hugo says hello!&lt;/p&gt;\n&lt;script&gt;document.write('&lt;script src=\"http://'\n        + (location.host || 'localhost').split(':')[0]\n    + ':1313/livereload.js?mindelay=10\"&gt;&lt;/'\n        + 'script&gt;')&lt;/script&gt;&lt;/body&gt;\n&lt;/html&gt;\nWhen you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\n\n\n\nBuild a “Dynamic” Home Page\n“Dynamic home page?” Hugo’s a static web site generator, so this seems an odd thing to say. I mean let’s have the home page automatically reflect the content in the site every time Hugo builds it. We’ll use iteration in the template to do that.\n\nCreate New Posts\nNow that we have the home page generating static content, let’s add some content to the site. We’ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 attempting to create  post/first.md of post\nINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md\nERROR: 2014/09/29 Unable to Cast &lt;nil&gt; to map[string]interface{}\n\n$\nThat wasn’t very nice, was it?\nThe “new” command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there’s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md\n+++\nDescription = \"\"\nTags = []\nCategories = []\n+++\n:wq\n\n$ find themes/zafta/archetypes -type f | xargs ls -l\n-rw-r--r--  1 quoha  staff   0 Sep 29 21:53 themes/zafta/archetypes/default.md\n-rw-r--r--  1 quoha  staff  51 Sep 29 21:54 themes/zafta/archetypes/post.md\n\n$ hugo --verbose new post/first.md\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 attempting to create  post/first.md of post\nINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md\nINFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md\n/Users/quoha/Sites/zafta/content/post/first.md created\n\n$ hugo --verbose new post/second.md\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 attempting to create  post/second.md of post\nINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md\nINFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md\n/Users/quoha/Sites/zafta/content/post/second.md created\n\n$ ls -l content/post\ntotal 16\n-rw-r--r--  1 quoha  staff  104 Sep 29 21:54 first.md\n-rw-r--r--  1 quoha  staff  105 Sep 29 21:57 second.md\n\n$ cat content/post/first.md\n+++\nCategories = []\nDescription = \"\"\nTags = []\ndate = \"2014-09-29T21:54:53-05:00\"\ntitle = \"first\"\n\n+++\nmy first post\n\n$ cat content/post/second.md\n+++\nCategories = []\nDescription = \"\"\nTags = []\ndate = \"2014-09-29T21:57:09-05:00\"\ntitle = \"second\"\n\n+++\nmy second post\n\n$\nBuild the web site and then verify the results.\n$ rm -rf public\n$ hugo --verbose\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 found taxonomies: map[string]string{\"category\":\"categories\", \"tag\":\"tags\"}\nWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\n0 draft content\n0 future content\n2 pages created\n0 tags created\n0 categories created\nin 4 ms\n$\nThe output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name '*.html' | xargs ls -l\n-rw-r--r--  1 quoha  staff  78 Sep 29 22:13 public/index.html\n-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/first/index.html\n-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/index.html\n-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/second/index.html\n$\nThe new files are empty because because the templates used to generate the content are empty. The homepage doesn’t show the new content, either. We have to update the templates to add the posts.\n\n\n\nList and Single Templates\nIn Hugo, we have three major kinds of templates. There’s the home page template that we updated previously. It is used only by the home page. We also have “single” templates which are used to generate output for a single content file. We also have “list” templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named “list.html” and single templates are named “single.html.”\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\n\n\nAdd Content to the Homepage\nThe home page will contain a list of posts. Let’s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n  {{ range first 10 .Data.Pages }}\n    &lt;h1&gt;{{ .Title }}&lt;/h1&gt;\n  {{ end }}\n&lt;/body&gt;\n&lt;/html&gt;\n:wq\n\n$\nHugo uses the Go template engine. That engine scans the template files for commands which are enclosed between “{{” and “}}”. In our template, the commands are:\n\nrange\n.Title\nend\n\nThe “range” command is an iterator. We’re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe “.Title” command prints the value of the “title” variable. Hugo pulls it from the front matter in the Markdown file.\nThe “end” command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds “end.” Everything between the “range” and “end” is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt’s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public\n$ hugo --verbose\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 found taxonomies: map[string]string{\"tag\":\"tags\", \"category\":\"categories\"}\nWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\n0 draft content\n0 future content\n2 pages created\n0 tags created\n0 categories created\nin 4 ms\n$ find public -type f -name '*.html' | xargs ls -l\n-rw-r--r--  1 quoha  staff  94 Sep 29 22:23 public/index.html\n-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/first/index.html\n-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/index.html\n-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/second/index.html\n$ cat public/index.html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n    &lt;h1&gt;second&lt;/h1&gt;\n\n    &lt;h1&gt;first&lt;/h1&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n$\nCongratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let’s take a moment to appreciate what we’ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you’ve learned everything you need to know to build a theme. All that’s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don’t worry, though, that’s all to come.\n\n\nAdd Content to the Posts\nWe’re working with posts, which are in the content/post/ directory. That means that their section is “post” (and if we don’t do something weird, their type is also “post”).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can’t find one, then it will look in the _default/ directory. There are some twists that we’ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let’s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l\n-rw-r--r--  1 quoha  staff  132 Sep 29 17:31 themes/zafta/layouts/_default/single.html\nWe could create a new template, post/single.html, or change the default. Since we don’t know of any other content types, let’s start with updating the default.\nRemember, any content that we haven’t created a template for will end up using this template. That can be good or bad. Bad because I know that we’re going to be adding different types of content and we’re going to end up undoing some of the changes we’ve made. It’s good because we’ll be able to see immediate results. It’s also good to start here because we can start to build the basic layout for the site. As we add more content types, we’ll refactor this file and move logic around. Hugo makes that fairly painless, so we’ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you’re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That’s a refreshing amount of joy right there.\n\nUpdate the Template File\n$ vi themes/zafta/layouts/_default/single.html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;{{ .Title }}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;\n  {{ .Content }}\n&lt;/body&gt;\n&lt;/html&gt;\n:wq\n\n$\nBuild the web site and verify the results.\n$ rm -rf public\n$ hugo --verbose\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 found taxonomies: map[string]string{\"tag\":\"tags\", \"category\":\"categories\"}\nWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\n0 draft content\n0 future content\n2 pages created\n0 tags created\n0 categories created\nin 4 ms\n\n$ find public -type f -name '*.html' | xargs ls -l\n-rw-r--r--  1 quoha  staff   94 Sep 29 22:40 public/index.html\n-rw-r--r--  1 quoha  staff  125 Sep 29 22:40 public/post/first/index.html\n-rw-r--r--  1 quoha  staff    0 Sep 29 22:40 public/post/index.html\n-rw-r--r--  1 quoha  staff  128 Sep 29 22:40 public/post/second/index.html\n\n$ cat public/post/first/index.html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;first&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;first&lt;/h1&gt;\n  &lt;p&gt;my first post&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n$ cat public/post/second/index.html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;second&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;second&lt;/h1&gt;\n  &lt;p&gt;my second post&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n$\nNotice that the posts now have content. You can go to localhost:1313/post/first to verify.\n\n\n\nLinking to Content\nThe posts are on the home page. Let’s add a link from there to the post. Since this is the home page, we’ll update its template.\n$ vi themes/zafta/layouts/index.html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n  {{ range first 10 .Data.Pages }}\n    &lt;h1&gt;&lt;a href=\"{{ .Permalink }}\"&gt;{{ .Title }}&lt;/a&gt;&lt;/h1&gt;\n  {{ end }}\n&lt;/body&gt;\n&lt;/html&gt;\nBuild the web site and verify the results.\n$ rm -rf public\n$ hugo --verbose\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 found taxonomies: map[string]string{\"tag\":\"tags\", \"category\":\"categories\"}\nWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\n0 draft content\n0 future content\n2 pages created\n0 tags created\n0 categories created\nin 4 ms\n\n$ find public -type f -name '*.html' | xargs ls -l\n-rw-r--r--  1 quoha  staff  149 Sep 29 22:44 public/index.html\n-rw-r--r--  1 quoha  staff  125 Sep 29 22:44 public/post/first/index.html\n-rw-r--r--  1 quoha  staff    0 Sep 29 22:44 public/post/index.html\n-rw-r--r--  1 quoha  staff  128 Sep 29 22:44 public/post/second/index.html\n\n$ cat public/index.html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n    &lt;h1&gt;&lt;a href=\"/post/second/\"&gt;second&lt;/a&gt;&lt;/h1&gt;\n\n    &lt;h1&gt;&lt;a href=\"/post/first/\"&gt;first&lt;/a&gt;&lt;/h1&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n$\n\n\nCreate a Post Listing\nWe have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let’s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let’s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\nAs with the single post, we have to decide to update _default/list.html or create post/list.html. We still don’t have multiple content types, so let’s stay consistent and update the default list template."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/creating-a-new-theme.html#creating-top-level-pages",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/creating-a-new-theme.html#creating-top-level-pages",
    "title": "Sarah Schwartz Stats",
    "section": "Creating Top Level Pages",
    "text": "Creating Top Level Pages\nLet’s add an “about” page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let’s verify that by creating an “about” page at the top level:\n$ vi content/about.md\n+++\ntitle = \"about\"\ndescription = \"about this site\"\ndate = \"2014-09-27\"\nslug = \"about time\"\n+++\n\n## about us\n\ni'm speechless\n:wq\nGenerate the web site and verify the results.\n$ find public -name '*.html' | xargs ls -l\n-rw-rw-r--  1 mdhender  staff   334 Sep 27 15:08 public/about-time/index.html\n-rw-rw-r--  1 mdhender  staff   527 Sep 27 15:08 public/index.html\n-rw-rw-r--  1 mdhender  staff   358 Sep 27 15:08 public/post/first-post/index.html\n-rw-rw-r--  1 mdhender  staff     0 Sep 27 15:08 public/post/index.html\n-rw-rw-r--  1 mdhender  staff   342 Sep 27 15:08 public/post/second-post/index.html\nNotice that the page wasn’t created at the top level. It was created in a sub-directory named ‘about-time/’. That name came from our slug. Hugo will use the slug to name the generated content. It’s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n    &lt;h1&gt;&lt;a href=\"http://localhost:1313/post/theme/\"&gt;creating a new theme&lt;/a&gt;&lt;/h1&gt;\n    &lt;h1&gt;&lt;a href=\"http://localhost:1313/about-time/\"&gt;about&lt;/a&gt;&lt;/h1&gt;\n    &lt;h1&gt;&lt;a href=\"http://localhost:1313/post/second-post/\"&gt;second&lt;/a&gt;&lt;/h1&gt;\n    &lt;h1&gt;&lt;a href=\"http://localhost:1313/post/first-post/\"&gt;first&lt;/a&gt;&lt;/h1&gt;\n&lt;script&gt;document.write('&lt;script src=\"http://'\n        + (location.host || 'localhost').split(':')[0]\n    + ':1313/livereload.js?mindelay=10\"&gt;&lt;/'\n        + 'script&gt;')&lt;/script&gt;&lt;/body&gt;\n&lt;/html&gt;\nNotice that the “about” link is listed with the posts? That’s not desirable, so let’s change that first.\n$ vi themes/zafta/layouts/index.html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n  &lt;h1&gt;posts&lt;/h1&gt;\n  {{ range first 10 .Data.Pages }}\n    {{ if eq .Type \"post\"}}\n      &lt;h2&gt;&lt;a href=\"{{ .Permalink }}\"&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;\n    {{ end }}\n  {{ end }}\n\n  &lt;h1&gt;pages&lt;/h1&gt;\n  {{ range .Data.Pages }}\n    {{ if eq .Type \"page\" }}\n      &lt;h2&gt;&lt;a href=\"{{ .Permalink }}\"&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;\n    {{ end }}\n  {{ end }}\n&lt;/body&gt;\n&lt;/html&gt;\n:wq\nGenerate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name '*.html' | xargs ls -l\n-rw-rw-r--  1 mdhender  staff    334 Sep 27 15:33 public/about-time/index.html\n-rw-rw-r--  1 mdhender  staff    645 Sep 27 15:33 public/index.html\n-rw-rw-r--  1 mdhender  staff    358 Sep 27 15:33 public/post/first-post/index.html\n-rw-rw-r--  1 mdhender  staff      0 Sep 27 15:33 public/post/index.html\n-rw-rw-r--  1 mdhender  staff    342 Sep 27 15:33 public/post/second-post/index.html\nKnowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let’s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml\n[permalinks]\n  page = \"/:title/\"\n  about = \"/:filename/\"\nGenerate the web site and verify that this didn’t work. Hugo lets “slug” or “URL” override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/creating-a-new-theme.html#sharing-templates",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/creating-a-new-theme.html#sharing-templates",
    "title": "Sarah Schwartz Stats",
    "section": "Sharing Templates",
    "text": "Sharing Templates\nIf you’ve been following along, you probably noticed that posts have titles in the browser and the home page doesn’t. That’s because we didn’t put the title in the home page’s template (layouts/index.html). That’s an easy thing to do, but let’s look at a different option.\nWe can put the common bits into a shared template that’s stored in the themes/zafta/layouts/partials/ directory.\n\nCreate the Header and Footer Partials\nIn Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme’s presentation.\n$ vi themes/zafta/layouts/partials/header.html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;{{ .Title }}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n:wq\n\n$ vi themes/zafta/layouts/partials/footer.html\n&lt;/body&gt;\n&lt;/html&gt;\n:wq\n\n\nUpdate the Home Page Template to Use the Partials\nThe most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \"theme/partials/header.html\" . }}\nversus\n{{ partial \"header.html\" . }}\nBoth pass in the context.\nLet’s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html\n{{ partial \"header.html\" . }}\n\n  &lt;h1&gt;posts&lt;/h1&gt;\n  {{ range first 10 .Data.Pages }}\n    {{ if eq .Type \"post\"}}\n      &lt;h2&gt;&lt;a href=\"{{ .Permalink }}\"&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;\n    {{ end }}\n  {{ end }}\n\n  &lt;h1&gt;pages&lt;/h1&gt;\n  {{ range .Data.Pages }}\n    {{ if or (eq .Type \"page\") (eq .Type \"about\") }}\n      &lt;h2&gt;&lt;a href=\"{{ .Permalink }}\"&gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}&lt;/a&gt;&lt;/h2&gt;\n    {{ end }}\n  {{ end }}\n\n{{ partial \"footer.html\" . }}\n:wq\nGenerate the web site and verify the results. The title on the home page is now “your title here”, which comes from the “title” variable in the config.toml file.\n\n\nUpdate the Default Single Template to Use the Partials\n$ vi themes/zafta/layouts/_default/single.html\n{{ partial \"header.html\" . }}\n\n  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;\n  {{ .Content }}\n\n{{ partial \"footer.html\" . }}\n:wq\nGenerate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/creating-a-new-theme.html#add-date-published-to-posts",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/creating-a-new-theme.html#add-date-published-to-posts",
    "title": "Sarah Schwartz Stats",
    "section": "Add “Date Published” to Posts",
    "text": "Add “Date Published” to Posts\nIt’s common to have posts display the date that they were written or published, so let’s add that. The front matter of our posts has a variable named “date.” It’s usually the date the content was created, but let’s pretend that’s the value we want to display.\n\nAdd “Date Published” to the Template\nWe’ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \"Mon, Jan 2, 2006\" }}\nPosts use the default single template, so we’ll change that file.\n$ vi themes/zafta/layouts/_default/single.html\n{{ partial \"header.html\" . }}\n\n  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;\n  &lt;h2&gt;{{ .Date.Format \"Mon, Jan 2, 2006\" }}&lt;/h2&gt;\n  {{ .Content }}\n\n{{ partial \"footer.html\" . }}\n:wq\nGenerate the web site and verify the results. The posts now have the date displayed in them. There’s a problem, though. The “about” page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an “if” statement like we did on the home page. Another way would be to create a separate template for posts.\nThe “if” solution works for sites that have just a couple of content types. It aligns with the principle of “code for today,” too.\nLet’s assume, though, that we’ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we’re going to create a section template.\nLet’s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post\n$ vi themes/zafta/layouts/_default/single.html\n{{ partial \"header.html\" . }}\n\n  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;\n  {{ .Content }}\n\n{{ partial \"footer.html\" . }}\n:wq\nNow we’ll update the post’s version of the single template. If you remember Hugo’s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html\n{{ partial \"header.html\" . }}\n\n  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;\n  &lt;h2&gt;{{ .Date.Format \"Mon, Jan 2, 2006\" }}&lt;/h2&gt;\n  {{ .Content }}\n\n{{ partial \"footer.html\" . }}\n:wq\n\nNote that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn’t.\n\n\nDon’t Repeat Yourself\nDRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you’re figuring that out, accept that you’ll be doing some refactoring. Hugo makes that easy and fast, so it’s okay to delay splitting up a template."
  },
  {
    "objectID": "themes/hugo-universal-theme/archetypes/default.html",
    "href": "themes/hugo-universal-theme/archetypes/default.html",
    "title": "Sarah Schwartz Stats",
    "section": "",
    "text": "+++ tags = [] categories = [] +++\n\n\n\n Back to top"
  },
  {
    "objectID": "skeletons.html",
    "href": "skeletons.html",
    "title": "In-class Examples",
    "section": "",
    "text": "In-class Examples\n\nSupplemental MaterialAppendix\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "RESOURCES",
      "Skeletons"
    ]
  },
  {
    "objectID": "r4research.html",
    "href": "r4research.html",
    "title": "Using R for Research: Intro",
    "section": "",
    "text": "Fall 2024 — Wednesdays 1:30 - 2:20pm — Dist Ed, 109\n\nBook Course Project Assignment: The link is for PSY 7650 MLM Course\n\nDaily Agenda\n\nDay 1Day 2Days 3-5Day 6Day 7Day 8\n\n\n[ September 4, 2024 ]\n\n\nSoftware Setup\nInstall R, R Studio, and R packages (tinytex)\nIntroduce R markdown & R notebooks\nWorkspace orientation\n\n\nExcyclopedia\nVol. 1 Setting up Your Computer\n\n\nYouTube Videos\nGetting Started: Installing R, R Studio, and R packages (2023 - 35 min)\nDIRECTIONS: Sarah’s R Studio Arrangement/options (5 min)\n\n\n\n\n\n\n\n\n\n\n[ September 11, 2024 ]\n\n\nIntro to R Syntax\nLingo - nouns (objects/data) vs. verbs (actions/functions)\nR piplines, linking/chaining steps\nImporting Data: csv, Excel, SPSS, etc.\n\n\nSlides\nGetting Started with R\n\n\nYouTube Videos\nR lingo, nouns (objects/data) and verbs (actions/functions) (40 min)\nR pipelines, linking/chaining steps (18 min)\nIntro to Tidy R (from MLM class in 2020 - 79 min)\n\n\n\n\n\n\n\n\n\n\n[ September 18 & 25 + October 2, 2024 ]\n\n\nBig Picture Overview\nWork through a sample case from reading in the data to producing a report.\n\n\nIn-class Example\nThanks you Karen Munoz for providing a de-identified data!\nTo get started, you will need the following files save in the SAME folder:\n(1) the DATA, in SPS format: SPSS dataset (.sav)\n(2) the empty skeleton/outline NOTEBOOK: Supplement Skeleton (.Rmd)\n(3) the STYLE file: APA 7th edition (.csl)\nAt the end of day 5, this is the file we ended with: End of day 5\n\nDay 3 Recording\n\n\n\n\n\n\n\n\nDay 4 Recording\n\n\n\n\n\n\n\n\nDay 5 Recording\n\n\n\n\n\n\n\n\n\n\n\n[ October 9, 2024 ]\n\nWork Flow Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n[ October 23, 2024 ]\n\nData Wrangling\n\n\n\n\n\n\n\n\n\n\n\n\n\n[ October 30, 2024 ]\n\n\nPowerful Plotting\n\n\n\nFile\nLink\n\n\n\n\n(1) Data\nIhno’s Dataset (.sav)\n\n\n(2) Notebook\nUSU Dissertation Appendix (.Rmd)\n\n\n(3) Style\nAPA 7th edition (.csl)\n\n\n\n\n\n\n\n\n\nDownloads\n\nSkeletonsExamples\n\n\nPublication Supplemental Material\nUSU Dissertation Appendix\nNeed to download: apa 7th style file\n\n\nAppendix: Weightloss.Rmd\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "TEACHING",
      "Using R for Research"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sarah E Schwartz",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "encyclopedia_vol.html",
    "href": "encyclopedia_vol.html",
    "title": "Volumn Links",
    "section": "",
    "text": "Volumn Links\n\nSoftwareWranglingExploreANOVARegressionMultilevel\n\n\nVol. 0 - Setting up your computer\n\nInstalling software (R, RStudio, packages, TeX)\nWorkspace orientation\nNotebook workflow\nPeriodic updating\n\n\n\nVol. 1 - Data Management\n\nImporting data files (SPSS, Excel, CSV, ect.)\nSub-setting (observations and variables)\nCreating new variables\nSaving revised data\n\n\n\nVol. 2 Exploratroy Data Analysis\n\nComputing and tabulating summary statistics (M/SD, count/%)\nCreating descriptive visualizations of distributions (boxplots, histograms) and relationships (scatter plots)\n\n\n\nVol. 3 Testing Mean Differences\n\nt-tests (independent groups, paired observations)\nANOVA (independent or between subjects, 1-way, 2-way)\nRM ANOVA (repeated meausres, between subjects)\nMixed ANOVA (both independent and between subjects)\nVisualizations (marginal means to prob interactions)\nPost hoc tests (multiple corrections, contrast statements)\n\n\n\nVol. 4 Multiple Linear Regression & GLM\n\nCalculating and visualizating correlation\nMultiple regression models (fitting, tabulating results, graphicaly probing interactions)\nGeneralizing the distribution (GLM: logistic regression, poisson regression, ect.)\nModeration and Mediation\nAverage Marginal Effects\n\n\n\nVol. 5 Multilevel and Marginal Models\n\nModeling clustered/hierarchical or longitudinal/repeated observations with multilevel models (MLM, LMM, GLMM, HLM), including:\nComputing ICCs\nModel fitting\nTabulating results\nVisualizings (marginal means to prob interactions)\nGeneralized Estimating Equations (GEE)\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "eBOOKS",
      "Encyclopedia"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Sarah is involved in the analysis of research on topics as varied as speech and language impairment, sexual assault, instructional technology, and family dynamics while collaborating with faculty and graduate students. She also teaches quantitative methodology courses for graduate students.\n\nCurrent\nResearch Assistant Professor, Psychology Department\nDirector, Statistical Consulting Studio\nEmma Eccles Jones College of Education and Human Services\nUtah State University\n\n\n\nEducation\n\nPhD in Statistics, 2017\nMS in Statistics, 2006\nBS Math & Chem Teaching, 2000\nUtah State University\n\n\n\n\n Back to top"
  },
  {
    "objectID": "foundation.html",
    "href": "foundation.html",
    "title": "6600: Statistcal Foundations",
    "section": "",
    "text": "“Statistical Foundations” is designed to provide graduate students with a practical, applied approach to the application of fundamental behavioral and educational research design and statistical principles. Students will learn how to differentiate and appropriately select the best statistical methods for use in various research designs and analytical problems.",
    "crumbs": [
      "TEACHING",
      "Stat Foundations"
    ]
  },
  {
    "objectID": "foundation.html#syllabus",
    "href": "foundation.html#syllabus",
    "title": "6600: Statistcal Foundations",
    "section": "Syllabus",
    "text": "Syllabus\n\nSummer 2021\nSpring 2021\nSummer 2020\nSpring 2020",
    "crumbs": [
      "TEACHING",
      "Stat Foundations"
    ]
  },
  {
    "objectID": "foundation.html#textbooks",
    "href": "foundation.html#textbooks",
    "title": "6600: Statistcal Foundations",
    "section": "Textbooks",
    "text": "Textbooks\n\nExplaining Psychological Statistics, 4th edition, by Barry Cohen\n\n\nUSU library: Free, with USU login\nAmazon: purchase, new or used\n\n\nPublication Manual of the APA: The Official Guide to APA Style, 7th edition (2020)\n\n\nAmazon: purchase new",
    "crumbs": [
      "TEACHING",
      "Stat Foundations"
    ]
  },
  {
    "objectID": "foundation.html#encyclopedia",
    "href": "foundation.html#encyclopedia",
    "title": "6600: Statistcal Foundations",
    "section": "Encyclopedia",
    "text": "Encyclopedia\n\nVolume 0. Setting up Your Computer\nVolume 1. Wrangling Your Data\nVolume 2. Exploring Your Data\nVolume 3. Testing Mean Differences\nVolume 4. Correlation & Regression",
    "crumbs": [
      "TEACHING",
      "Stat Foundations"
    ]
  },
  {
    "objectID": "foundation.html#youtube",
    "href": "foundation.html#youtube",
    "title": "6600: Statistcal Foundations",
    "section": "YouTube",
    "text": "YouTube\n\nSarah Schwartz Stats LINK",
    "crumbs": [
      "TEACHING",
      "Stat Foundations"
    ]
  },
  {
    "objectID": "foundation.html#downloads",
    "href": "foundation.html#downloads",
    "title": "6600: Statistcal Foundations",
    "section": "Downloads",
    "text": "Downloads\n\nIhno’s Dataset: SPSS or Excel, data dictionary\nFormula Sheet\nLook-up Tables",
    "crumbs": [
      "TEACHING",
      "Stat Foundations"
    ]
  },
  {
    "objectID": "mlm.html",
    "href": "mlm.html",
    "title": "Multilevel and Marginal Models",
    "section": "",
    "text": "Multilevel Modeling is designed to provide graduate students with a practical, applied approach to the clustered and/or longitudinal data. Students will learn how to differentiate and appropriately select the best statistical methods for use in various research designs and analytical problems. This includes Multilevel Modeling (MLM), which also goes by such names as Hierarchical Linear Modeling (HLM) and Mixed Effects Regression (MER), Generalized Multilevel Modeling (GzMLM), and Generalized Estimating Equations (GEE).",
    "crumbs": [
      "TEACHING",
      "Multilevel Modeling"
    ]
  },
  {
    "objectID": "mlm.html#structure",
    "href": "mlm.html#structure",
    "title": "Multilevel and Marginal Models",
    "section": "Structure",
    "text": "Structure\nThis is a lecture and applied skills course and students will be expected to demonstrate their learning via classroom participation, written assignments, and a presentation. Much of the basic material will be presented in readings (textbook and supplements) and pre-recorded lectures which students will view prior to class. The purpose of class time (on Zoom) is to elaborate on interesting or difficult material presented in the text, conduct skill-building exercises and demonstrations, and to provide a forum for class discussions in more of a lab fashion. We will frequently use a hands-on approach in class, working through analyses together via computer software.",
    "crumbs": [
      "TEACHING",
      "Multilevel Modeling"
    ]
  },
  {
    "objectID": "mlm.html#syllabus",
    "href": "mlm.html#syllabus",
    "title": "Multilevel and Marginal Models",
    "section": "Syllabus",
    "text": "Syllabus\n\nFall 2020 - Dr. Schwartz (Tue/Thr 4:30-6:00 pm)\nFall 2020 - Dr. Schwartz (Tue/Thr 4:30-6:00 pm)",
    "crumbs": [
      "TEACHING",
      "Multilevel Modeling"
    ]
  },
  {
    "objectID": "mlm.html#textbooks",
    "href": "mlm.html#textbooks",
    "title": "Multilevel and Marginal Models",
    "section": "Textbooks",
    "text": "Textbooks\n\nMultilevel Analysis: Techniques and Applications, 3rd edition (2018), by Joop J. Hox, Mirjam Moerbeek, and Rens van de Schoot\n\n\nUSU library: Free, with USU login\nAmazon: purchase, new or used\n\n\nPublication Manual of the APA: The Official Guide to APA Style, 7th edition (2020)\n\n\nAmazon: purchase new",
    "crumbs": [
      "TEACHING",
      "Multilevel Modeling"
    ]
  },
  {
    "objectID": "mlm.html#encyclopedia",
    "href": "mlm.html#encyclopedia",
    "title": "Multilevel and Marginal Models",
    "section": "Encyclopedia",
    "text": "Encyclopedia\n\nVolume 0. Setting up Your Computer\nVolume 1. Wrangling Your Data\nVolume 2. Exploring Your Data\nVolume 3. Testing Mean Differences\nVolume 4. Correlation & Regression\nVolume 5. Multilevel & Marginal Modeling\n\n\nYouTube\n\nSarah Schwartz Stats LINK",
    "crumbs": [
      "TEACHING",
      "Multilevel Modeling"
    ]
  },
  {
    "objectID": "regression.html",
    "href": "regression.html",
    "title": "Sarah Schwartz Stats",
    "section": "",
    "text": "Coming soon for Spring 2025\n\n\n Back to top",
    "crumbs": [
      "TEACHING",
      "Regression Analysis"
    ]
  },
  {
    "objectID": "teaching.html",
    "href": "teaching.html",
    "title": "Teaching Experience",
    "section": "",
    "text": "Philosophy\n\nGrowth mindset\nApplication\n\n\n\n\nGraduate Course\nCurrently teaching at USU\n\nUsing RFoundationsRegressionMultilevel\n\n\nEDUC\n\nIntroduction to Using R for Research\nWorkshop Series\n\n\n\nPSY 6600 or EDUC 6600\n\nStatistical Foundations\nThis course covers research design and statistical concepts for research in education, human services, and psychology, with an emphasis on the selection and interpretation of statistical analyses.\n\n\n\nPSY 7610 or EDUC 7610\n\nRegression Analysis\nThis course is an advanced treatment of research design and statistical concepts and issues in educational, human services, and psychological research.\n\n\n\nPSY 7650\n\nMultilevel and Marginal Models\nCoverage of multilevel (i.e., mixed-effects, hierarchical linear), and marginal (GEE) models for both continuous and categorical outcomes. Includes application of these methods to many types of cross-sectional and longitudinal research designs (e.g., experimental, case-control, cohort, cross-over, complex sample, randomized controlled trials).\n\n\n\n\n\n\n\nUndergraduate Courses\nPast courses taught at USU\n\nPSY 3010STAT 2000STAT 1040MATH 1050MATH 1010\n\n\n\nPsychological Statistics\nThis course is an introduction to descriptive and inferential statistics for the behavioral sciences. Topics include measures of central tendency and variability, sampling distributions, and hypothesis testing procedures including t-tests, analysis of variance, and correlation and regression.\n\n\n\n\nStatistical Methods\nIntroduction to statistical concepts, graphical techniques, probability, distributions, estimation, one and two sample testing, chi-square tests, and simple linear regression, one-way ANOVA.\n\n\n\n\nIntroduction to Statistics\nDescriptive and inferential statistical methods. Emphasis on conceptual understanding and statistical thinking. Examples presented from many different areas.\n\n\n\n\nCollege Algebra\nFunctions: graphs, transformations, combinations and inverses. Polynomial, rational, exponential, logarithmic functions and applications. Systems of equations and matrices. Graphing calculator required.\n\n\n\n\nIntermediate Algebra\nLinear equations and inequalities, polynomials and exponents, rational expressions, roots and radicals, quadratic equations, lines, systems of equations and inequalities, applied problems , factoring, graphs, the quadratic formula , completing the square and complex numbers.\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "TEACHING",
      "Overview"
    ]
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/categories-post.html",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/categories-post.html",
    "title": "Sarah Schwartz Stats",
    "section": "",
    "text": "+++ title = “Categories Post” date = “2021-08-01T21:29:20+02:00” tags = [“golang”, “programming”, “theme”, “hugo”] categories = [“programming”,“lorem”,“pseudo”] banner = “img/banners/banner-4.jpg” authors = [“John Doe”] +++\nI’m a post with multiple categories in the frontmatter:\ncategories = [\"programming\",\"lorem\",\"pseudo\"]\nLorem ipsum dolor sit amet, consectetur adipiscing elit. In mauris nulla, vestibulum vel auctor sed, posuere eu lorem. Aliquam consequat augue ut accumsan mollis. Suspendisse malesuada sodales tincidunt. Vivamus sed erat ac augue bibendum porta sed id ipsum. Ut mollis mauris eget ligula sagittis cursus. Aliquam id pharetra tellus. Pellentesque sed tempus risus. Proin id hendrerit ante. Vestibulum vitae urna ut mauris ultricies dignissim. Ut ante turpis, tristique vitae sagittis quis, sagittis nec diam. Fusce pulvinar cursus porta. Vivamus maximus leo dolor, ut pellentesque lorem fringilla nec. Mauris faucibus turpis posuere sapien euismod, a ullamcorper mi maximus.\nMorbi varius ex vel justo dictum placerat. Sed ac arcu pretium, varius elit eget, gravida purus. Fusce sit amet massa mollis eros tincidunt sollicitudin. Suspendisse iaculis cursus mauris ut sagittis. Interdum et malesuada fames ac ante ipsum primis in faucibus. Maecenas elit ligula, molestie quis magna eu, semper posuere lorem. Mauris a justo pharetra, congue ex eget, tincidunt massa. Maecenas sit amet neque lorem.\nCurabitur at elementum quam. Curabitur tristique elit non sapien aliquam vulputate. Vivamus in odio tincidunt, tempor sem quis, tincidunt lacus. Mauris pulvinar nunc sed tempus dictum. Nam vel arcu quis mi fermentum ullamcorper non ac lacus. Donec aliquet vitae ante at imperdiet. Aenean scelerisque venenatis urna, eget elementum risus convallis ac. Nullam gravida arcu lacus, non consectetur augue pretium non. Duis dignissim eros id urna pretium congue. Nullam eu magna in sem sollicitudin tempor. Pellentesque vel convallis ligula. Quisque semper, turpis a rhoncus efficitur, magna nibh iaculis elit, eget tempor dolor eros ut mi. Maecenas eu placerat lacus. Praesent congue pretium nulla, sed suscipit metus rutrum vel.\n\n\n\n Back to top"
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html",
    "title": "Hugo Parameters",
    "section": "",
    "text": "+++ title = “Go is for lovers” date = “2015-09-17T13:47:08+02:00” tags = [“go”] categories = [“programming”] banner = “img/banners/banner-2.jpg” facebook_author = “GolangSociety” +++\nHugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.\nThis document is a brief primer on using go templates. The go docs provide more details."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html#introduction-to-go-templates",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html#introduction-to-go-templates",
    "title": "Hugo Parameters",
    "section": "Introduction to Go Templates",
    "text": "Introduction to Go Templates\nGo templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that go templates parse very quickly.\nA unique characteristic of go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the go docs."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html#basic-syntax",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html#basic-syntax",
    "title": "Hugo Parameters",
    "section": "Basic Syntax",
    "text": "Basic Syntax\nGo lang templates are html files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable “foo”:\n{{ foo }}\nParameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}\nMethods and fields are accessed via dot notation\nAccessing the Page Parameter “bar”\n{{ .Params.bar }}\nParentheses can be used to group items together\n{{ if or (isset .Params \"alt\") (isset .Params \"caption\") }} Caption {{ end }}"
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html#variables",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html#variables",
    "title": "Hugo Parameters",
    "section": "Variables",
    "text": "Variables\nEach go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n&lt;title&gt;{{ .Title }}&lt;/title&gt;\nVariables can also be defined and referenced.\n{{ $address := \"123 Main St.\"}}\n{{ $address }}"
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html#functions",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html#functions",
    "title": "Hugo Parameters",
    "section": "Functions",
    "text": "Functions\nGo template ship with a few functions which provide basic functionality. The go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}"
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html#includes",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html#includes",
    "title": "Hugo Parameters",
    "section": "Includes",
    "text": "Includes\nWhen including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \"chrome/header.html\" . }}"
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html#logic",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html#logic",
    "title": "Hugo Parameters",
    "section": "Logic",
    "text": "Logic\nGo templates provide the most basic iteration and conditional logic.\n\nIteration\nJust like in go, the go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }}\n    {{ . }}\n{{ end }}\nExample 2: Declaring value variable name\n{{range $element := array}}\n    {{ $element }}\n{{ end }}\nExample 2: Declaring key and value variable name\n{{range $index, $element := array}}\n    {{ $index }}\n    {{ $element }}\n{{ end }}\n\n\nConditionals\nIf, else, with, or, & and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n\nfalse\n0\nany array, slice, map, or string of length zero\n\nExample 1: If\n{{ if isset .Params \"title\" }}&lt;h4&gt;{{ index .Params \"title\" }}&lt;/h4&gt;{{ end }}\nExample 2: If -&gt; Else\n{{ if isset .Params \"alt\" }}\n    {{ index .Params \"alt\" }}\n{{else}}\n    {{ index .Params \"caption\" }}\n{{ end }}\nExample 3: And & Or\n{{ if and (or (isset .Params \"title\") (isset .Params \"caption\")) (isset .Params \"attr\")}}\nExample 4: With\nAn alternative way of writing “if” and then referencing the same value is to use “with” instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}&lt;h4&gt;{{ . }}&lt;/h4&gt;{{ end }}\nExample 5: If -&gt; Else If\n{{ if isset .Params \"alt\" }}\n    {{ index .Params \"alt\" }}\n{{ else if isset .Params \"caption\" }}\n    {{ index .Params \"caption\" }}\n{{ end }}"
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html#pipes",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html#pipes",
    "title": "Hugo Parameters",
    "section": "Pipes",
    "text": "Pipes\nOne of the most powerful components of go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline’s output becomes the input of the following pipe.\nBecause of the very simple syntax of go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}\nis the same as\n{{ eq 1 1 | if }} Same {{ end }}\nIt does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \"disqus_url\" | html }}\nAccess the page parameter called “disqus_url” and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \"title\") (isset .Params \"caption\")) (isset .Params \"attr\")}}\nStuff Here\n{{ end }}\nCould be rewritten as\n{{  isset .Params \"caption\" | or isset .Params \"title\" | or isset .Params \"attr\" | if }}\nStuff Here\n{{ end }}"
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html#context-aka.-the-dot",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html#context-aka.-the-dot",
    "title": "Hugo Parameters",
    "section": "Context (aka. the dot)",
    "text": "Context (aka. the dot)\nThe most easily overlooked concept to understand about go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n  {{ $title := .Site.Title }}\n  {{ range .Params.tags }}\n    &lt;li&gt; &lt;a href=\"{{ $baseurl }}/tags/{{ . | urlize | lower  }}\"&gt;{{ . }}&lt;/a&gt; - {{ $title }} &lt;/li&gt;\n  {{ end }}\nNotice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop."
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html#using-content-page-parameters",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html#using-content-page-parameters",
    "title": "Hugo Parameters",
    "section": "Using Content (page) Parameters",
    "text": "Using Content (page) Parameters\nIn each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn’t make a lot of sense. We’ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n---\ntitle: \"Permalinks\"\ndate: \"2013-11-18\"\naliases:\n  - \"/doc/permalinks/\"\ngroups: [\"extras\"]\ngroups_weight: 30\nnotoc: true\n---\nHere is the corresponding code inside of the template:\n  {{ if not .Params.notoc }}\n    &lt;div id=\"toc\" class=\"well col-md-4 col-sm-6\"&gt;\n    {{ .TableOfContents }}\n    &lt;/div&gt;\n  {{ end }}"
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html#using-site-config-parameters",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/go-is-for-lovers.html#using-site-config-parameters",
    "title": "Hugo Parameters",
    "section": "Using Site (config) Parameters",
    "text": "Using Site (config) Parameters\nIn your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams:\n  CopyrightHTML: \"Copyright &#xA9; 2013 John Doe. All Rights Reserved.\"\n  TwitterUser: \"spf13\"\n  SidebarRecentLimit: 5\nWithin a footer layout, you might then declare a &lt;footer&gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}&lt;footer&gt;\n&lt;div class=\"text-center\"&gt;{{.Site.Params.CopyrightHTML | safeHtml}}&lt;/div&gt;\n&lt;/footer&gt;{{end}}\nAn alternative way of writing the “if” and then referencing the same value is to use “with” instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}&lt;span class=\"twitter\"&gt;\n&lt;a href=\"https://twitter.com/{{.}}\" rel=\"author\"&gt;\n&lt;img src=\"/images/twitter.png\" width=\"48\" height=\"48\" title=\"Twitter: {{.}}\"\n alt=\"Twitter\"&gt;&lt;/a&gt;\n&lt;/span&gt;{{end}}\nFinally, if you want to pull “magic constants” out of your layouts, you can do so, such as in this example:\n&lt;nav class=\"recent\"&gt;\n  &lt;h1&gt;Recent Posts&lt;/h1&gt;\n  &lt;ul&gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}\n    &lt;li&gt;&lt;a href=\"{{.RelPermalink}}\"&gt;{{.Title}}&lt;/a&gt;&lt;/li&gt;\n  {{end}}&lt;/ul&gt;\n&lt;/nav&gt;"
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/blog/linked-post.html",
    "href": "themes/hugo-universal-theme/exampleSite/content/blog/linked-post.html",
    "title": "Sarah Schwartz Stats",
    "section": "",
    "text": "+++ title = “Linked post” date = “2015-10-02T21:49:20+02:00” tags = [“golang”, “programming”, “theme”, “hugo”] categories = [“programming”] banner = “img/banners/banner-4.jpg” authors = [“John Doe”,“Jane Doe”] +++\nI’m a linked post in the menu. You can add other posts by adding the following line to the frontmatter:\nmenu = \"main\"\nLorem ipsum dolor sit amet, consectetur adipiscing elit. In mauris nulla, vestibulum vel auctor sed, posuere eu lorem. Aliquam consequat augue ut accumsan mollis. Suspendisse malesuada sodales tincidunt. Vivamus sed erat ac augue bibendum porta sed id ipsum. Ut mollis mauris eget ligula sagittis cursus. Aliquam id pharetra tellus. Pellentesque sed tempus risus. Proin id hendrerit ante. Vestibulum vitae urna ut mauris ultricies dignissim. Ut ante turpis, tristique vitae sagittis quis, sagittis nec diam. Fusce pulvinar cursus porta. Vivamus maximus leo dolor, ut pellentesque lorem fringilla nec. Mauris faucibus turpis posuere sapien euismod, a ullamcorper mi maximus.\nMorbi varius ex vel justo dictum placerat. Sed ac arcu pretium, varius elit eget, gravida purus. Fusce sit amet massa mollis eros tincidunt sollicitudin. Suspendisse iaculis cursus mauris ut sagittis. Interdum et malesuada fames ac ante ipsum primis in faucibus. Maecenas elit ligula, molestie quis magna eu, semper posuere lorem. Mauris a justo pharetra, congue ex eget, tincidunt massa. Maecenas sit amet neque lorem.\nCurabitur at elementum quam. Curabitur tristique elit non sapien aliquam vulputate. Vivamus in odio tincidunt, tempor sem quis, tincidunt lacus. Mauris pulvinar nunc sed tempus dictum. Nam vel arcu quis mi fermentum ullamcorper non ac lacus. Donec aliquet vitae ante at imperdiet. Aenean scelerisque venenatis urna, eget elementum risus convallis ac. Nullam gravida arcu lacus, non consectetur augue pretium non. Duis dignissim eros id urna pretium congue. Nullam eu magna in sem sollicitudin tempor. Pellentesque vel convallis ligula. Quisque semper, turpis a rhoncus efficitur, magna nibh iaculis elit, eget tempor dolor eros ut mi. Maecenas eu placerat lacus. Praesent congue pretium nulla, sed suscipit metus rutrum vel.\n\n\n\n Back to top"
  },
  {
    "objectID": "themes/hugo-universal-theme/exampleSite/content/contact.html",
    "href": "themes/hugo-universal-theme/exampleSite/content/contact.html",
    "title": "We are here to help you",
    "section": "",
    "text": "+++ title = “Contact” id = “contact” +++\n\nWe are here to help you\nAre you curious about something? Do you have some kind of problem with our products? As am hastily invited settled at limited civilly fortune me. Really spring in extent an by. Judge but built gay party world. Of so am he remember although required. Bachelor unpacked be advanced at. Confined in declared marianne is vicinity.\nPlease feel free to contact us, our customer service center is working for you 24/7.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "themes/hugo-universal-theme/layouts/archetypes/default.html",
    "href": "themes/hugo-universal-theme/layouts/archetypes/default.html",
    "title": "Sarah Schwartz Stats",
    "section": "",
    "text": "+++ tags = [] categories = [] description = “” menu = “” banner = “” images = [] +++\n\n\n\n\n Back to top"
  }
]